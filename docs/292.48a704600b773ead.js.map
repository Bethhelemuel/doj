{"version":3,"file":"292.48a704600b773ead.js","mappings":"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","names":["i0","_r1","ctx_r1","resendOTP","errorMessage","OtpComponent","constructor","fb","authService","dialogRef","data","router","this","isResending","otpForm","group","otp1","Validators","required","pattern","otp2","otp3","otp4","otp5","otp6","userEmail","email","onSubmit","otpCode","getOtpCode","valid","verifyOtp","otp","subscribe","next","response","message","setTimeout","close","navigate","error","err","console","log","value","resendOtp","moveFocus","event","nextElementId","target","length","document","getElementById","focus","submitOnComplete","i1","i2","i3","MAT_DIALOG_DATA","i4","selectors","standalone","features","decls","vars","consts","template","rf","ctx","$event","OtpComponent_p_14_Template","OtpComponent_p_15_Template","OtpComponent_p_16_Template","invalid","RouterModule","SharedModule","i5","styles","closeAlert","_c0","alertType","alertMessage","RegisterComponent","formBuilder","dialog","SignUpOptions","image","name","submitted","showPassword","showConfirmPassword","alertVisible","ngOnInit","initializeForm","signUpForm","get","disable","firstName","minLength","lastName","emailAddress","role","password","confirmPassword","validator","passwordMatchValidator","valueChanges","enable","endsWith","setValue","form","mismatch","togglePasswordVisibility","toggleConfirmPasswordVisibility","register","showAlert","open","type","alertTimeout","clearTimeout","f","controls","login","then","window","location","reload","RegisterComponent_div_7_Template","RegisterComponent_div_20_Template","RegisterComponent_div_26_Template","RegisterComponent_div_33_Template","RegisterComponent_div_45_Template","RegisterComponent_div_53_Template","RegisterComponent_div_60_Template","RegisterComponent_div_61_Template","touched","errors"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./src/app/demo/authentication/otp/otp.component.html","./src/app/demo/authentication/otp/otp.component.ts","./src/app/demo/authentication/register/register.component.html","./src/app/demo/authentication/register/register.component.ts"],"sourcesContent":["<div class=\"otp-dialog\">\r\n  <h2 class=\"otp-title\">Enter OTP</h2>\r\n  <form [formGroup]=\"otpForm\" (ngSubmit)=\"onSubmit()\" class=\"otp-form\">\r\n    <div class=\"otp-inputs\">\r\n      <input type=\"text\" maxlength=\"1\" formControlName=\"otp1\" (input)=\"moveFocus($event, 'otp2')\" class=\"otp-input\" autofocus />\r\n      <input type=\"text\" maxlength=\"1\" formControlName=\"otp2\" (input)=\"moveFocus($event, 'otp3')\" class=\"otp-input\" />\r\n      <input type=\"text\" maxlength=\"1\" formControlName=\"otp3\" (input)=\"moveFocus($event, 'otp4')\" class=\"otp-input\" />\r\n      <input type=\"text\" maxlength=\"1\" formControlName=\"otp4\" (input)=\"moveFocus($event, 'otp5')\" class=\"otp-input\" />\r\n      <input type=\"text\" maxlength=\"1\" formControlName=\"otp5\" (input)=\"moveFocus($event, 'otp6')\" class=\"otp-input\" />\r\n      <input type=\"text\" maxlength=\"1\" formControlName=\"otp6\" (input)=\"submitOnComplete()\" class=\"otp-input\" />\r\n    </div>\r\n    <button type=\"submit\" [disabled]=\"otpForm.invalid\" class=\"verify-button\">Verify OTP</button>\r\n  </form>\r\n\r\n  <div class=\"resend-otp\">\r\n    <p *ngIf=\"!isResending\">Didn't receive OTP? <a (click)=\"resendOTP()\" class=\"resend-link\">Resend OTP</a></p>\r\n    <p *ngIf=\"isResending\" class=\"resending-message\">Resending OTP...</p>\r\n  </div>\r\n\r\n  <p *ngIf=\"errorMessage\" class=\"error-message\">{{ errorMessage }}</p>\r\n</div>\r\n","import { Component, Inject } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport { AuthService } from 'src/app/services/auth.service';\r\nimport { SharedModule } from 'src/app/theme/shared/shared.module';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-otp',\r\n  standalone: true,\r\n  imports: [RouterModule, SharedModule],\r\n  templateUrl: './otp.component.html',\r\n  styleUrls: ['./otp.component.scss']\r\n})\r\nexport class OtpComponent {\r\n  otpForm: FormGroup;\r\n  errorMessage: string = '';\r\n  isResending: boolean = false;\r\n  userEmail: any;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private authService: AuthService,\r\n    private dialogRef: MatDialogRef<OtpComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    private router: Router,\r\n  ) {\r\n    // Initialize the form with validators for all 6 OTP fields\r\n    this.otpForm = this.fb.group({\r\n      otp1: ['', [Validators.required, Validators.pattern('[0-9]{1}')]],\r\n      otp2: ['', [Validators.required, Validators.pattern('[0-9]{1}')]],\r\n      otp3: ['', [Validators.required, Validators.pattern('[0-9]{1}')]],\r\n      otp4: ['', [Validators.required, Validators.pattern('[0-9]{1}')]],\r\n      otp5: ['', [Validators.required, Validators.pattern('[0-9]{1}')]],\r\n      otp6: ['', [Validators.required, Validators.pattern('[0-9]{1}')]]\r\n    });\r\n    this.userEmail = data.email;\r\n  }\r\n\r\n  // Method to handle OTP form submission\r\n  onSubmit() {\r\n    const otpCode = this.getOtpCode();\r\n  \r\n    if (this.otpForm.valid) {\r\n      this.authService.verifyOtp({ email: this.userEmail, otp: otpCode }).subscribe({\r\n        next: (response) => {\r\n          this.errorMessage = response.message;\r\n  \r\n          // Wait for 5000ms before closing the dialog and navigating to login\r\n          setTimeout(() => {\r\n            this.dialogRef.close();  // Close dialog after 5 seconds\r\n            this.router.navigate(['/login']);  // Navigate to login after dialog is closed\r\n          }, 5000);  // 5000 milliseconds (5 seconds)\r\n        },\r\n        error: (err) => {\r\n          console.log(err.error);\r\n          this.errorMessage = err.error.message;\r\n        }\r\n      });\r\n    } else {\r\n      this.errorMessage = 'Please enter a valid 6-digit OTP';\r\n    }\r\n  }\r\n  \r\n  \r\n\r\n  // Helper method to concatenate OTP fields into a single string\r\n  getOtpCode(): string {\r\n    return `${this.otpForm.value.otp1}${this.otpForm.value.otp2}${this.otpForm.value.otp3}${this.otpForm.value.otp4}${this.otpForm.value.otp5}${this.otpForm.value.otp6}`;\r\n  }\r\n\r\n  // Method to handle OTP resending\r\n  resendOTP() {\r\n    this.isResending = true;\r\n    this.authService.resendOtp().subscribe({\r\n      next: () => {\r\n        this.isResending = false;\r\n      },\r\n      error: () => {\r\n        this.isResending = false;\r\n        this.errorMessage = 'Failed to resend OTP. Please try again later.';\r\n      }\r\n    });\r\n  }\r\n\r\n  // Function to handle auto-focus movement between OTP inputs\r\n  moveFocus(event: any, nextElementId: string) {\r\n    const input = event.target;\r\n    if (input.value.length === 1 && nextElementId) {\r\n      const nextInput = document.getElementById(nextElementId);\r\n      nextInput?.focus();\r\n    }\r\n  }\r\n\r\n  // Automatically submit OTP when all fields are filled\r\n  submitOnComplete() {\r\n    if (this.otpForm.valid) {\r\n      this.onSubmit();\r\n    }\r\n  }\r\n\r\n\r\n  \r\n}\r\n","<div class=\"auth-main\">\r\n  <div class=\"auth-bg\"></div>\r\n  <div class=\"auth-wrapper v3\">\r\n    <div class=\"auth-form\">\r\n      <div class=\"auth-header text-center mb-3\">\r\n        <a href=\"javascript:\">\r\n          <img src=\"assets/images/logo-dark.gif\" alt=\"logo img\" />\r\n        </a>\r\n      </div>\r\n      <div *ngIf=\"alertVisible\" [ngClass]=\"{'alert': true, 'alert-success': alertType === 'success', 'alert-danger': alertType === 'danger'}\" role=\"alert\">\r\n        {{ alertMessage }}\r\n        <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"closeAlert()\">\r\n          <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n      </div>\r\n      <div class=\"card my-4 shadow-lg rounded-lg border-0\">\r\n        <div class=\"card-body px-3 py-4\">\r\n          <h3 class=\"text-center mb-3\"><strong>Sign Up</strong></h3>\r\n\r\n          <form [formGroup]=\"signUpForm\" >\r\n            <div class=\"row\">\r\n              <div class=\"col-md-6\">\r\n                <div class=\"form-group mb-3\">\r\n                  <label class=\"form-label\" for=\"firstName\">First Name*</label>\r\n                  <input type=\"text\" formControlName=\"firstName\" class=\"form-control shadow-sm\" id=\"firstName\" placeholder=\"First Name\" />\r\n                  <div *ngIf=\"signUpForm.get('firstName').invalid && signUpForm.get('firstName').touched\">\r\n                    <small class=\"error\">First name is required.</small>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-md-6\">\r\n                <div class=\"form-group mb-3\">\r\n                  <label class=\"form-label\" for=\"lastName\">Last Name*</label>\r\n                  <input type=\"text\" formControlName=\"lastName\" class=\"form-control shadow-sm\" id=\"lastName\" placeholder=\"Last Name\" />\r\n                  <div *ngIf=\"signUpForm.get('lastName').invalid && signUpForm.get('lastName').touched\">\r\n                    <small class=\"error\">Last name is required.</small>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"row\">\r\n              <div class=\"col-md-6\">\r\n                <div class=\"form-group mb-3\">\r\n                  <label class=\"form-label\" for=\"emailAddress\">Email Address*</label>\r\n                  <input\r\n                    type=\"email\"\r\n                    formControlName=\"emailAddress\"\r\n                    class=\"form-control shadow-sm\"\r\n                    id=\"emailAddress\"\r\n                    placeholder=\"Email Address\"\r\n                  />\r\n                  <div *ngIf=\"signUpForm.get('emailAddress').invalid && signUpForm.get('emailAddress').touched\">\r\n                    <small class=\"error\">Email is required and must be a valid email address.</small>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-md-6\">\r\n                <div class=\"form-group mb-3\">\r\n                  <label class=\"form-label\" for=\"role\">Role*</label>\r\n                  <select formControlName=\"role\" class=\"form-control shadow-sm\" id=\"role\" [disabled]=\"!signUpForm.get('emailAddress').valid\">\r\n                    <option value=\"\" disabled selected>Select Role</option>\r\n                    <option value=\"official\">Officials</option>\r\n                    <option value=\"liquidator\">Liquidators</option>\r\n                  </select>\r\n                  <div *ngIf=\"signUpForm.get('role').invalid && signUpForm.get('role').touched\">\r\n                    <small class=\"error\">Role is required.</small>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"row\">\r\n              <div class=\"col-md-6\">\r\n                <div class=\"form-group mb-3 position-relative\">\r\n                  <label class=\"form-label\" for=\"password\">Password*</label>\r\n                  <input\r\n                    [type]=\"showPassword ? 'text' : 'password'\"\r\n                    formControlName=\"password\"\r\n                    class=\"form-control shadow-sm\"\r\n                    id=\"password\"\r\n                    placeholder=\"Password\"\r\n                  />\r\n                  <i\r\n                    class=\"show-hide-icon\"\r\n                    [ngClass]=\"showPassword ? 'fa fa-eye-slash' : 'fa fa-eye'\"\r\n                    (click)=\"togglePasswordVisibility()\"\r\n                  ></i>\r\n                  <div *ngIf=\"signUpForm.get('password').invalid && signUpForm.get('password').touched\">\r\n                    <small class=\"error\">Password is required and must be at least 6 characters long.</small>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"col-md-6\">\r\n                <div class=\"form-group mb-3 position-relative\">\r\n                  <label class=\"form-label\" for=\"confirmPassword\">Confirm Password*</label>\r\n                  <input\r\n                    [type]=\"showConfirmPassword ? 'text' : 'password'\"\r\n                    formControlName=\"confirmPassword\"\r\n                    class=\"form-control shadow-sm\"\r\n                    id=\"confirmPassword\"\r\n                    placeholder=\"Confirm Password\"\r\n                  />\r\n                  <i\r\n                    class=\"show-hide-icon\"\r\n                    [ngClass]=\"showConfirmPassword ? 'fa fa-eye-slash' : 'fa fa-eye'\"\r\n                    (click)=\"toggleConfirmPasswordVisibility()\"\r\n                  ></i>\r\n                  <div *ngIf=\"signUpForm.get('confirmPassword').invalid && signUpForm.get('confirmPassword').touched\">\r\n                    <small class=\"error\">Confirm password is required and must match the password.</small>\r\n                  </div>\r\n                  <div *ngIf=\"signUpForm.errors?.mismatch && signUpForm.get('confirmPassword').touched\">\r\n                    <small class=\"error\">Passwords must match.</small>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <p class=\"text-sm text-muted text-center mt-3\">\r\n              By signing up, you agree to our\r\n              <a href=\"javascript:\" class=\"text-primary\">Terms of Service</a>\r\n              and\r\n              <a href=\"javascript:\" class=\"text-primary\">Privacy Policy</a>\r\n              .\r\n            </p>\r\n\r\n            <div class=\"d-grid mt-3\">\r\n              <button type=\"submit\" class=\"btn btn-primary shadow\" (click)=\"onSubmit()\" >Create Account</button>\r\n            </div>\r\n\r\n            <p class=\"text-center mt-3\">\r\n              Already have an account?\r\n              <a (click)=\"login()\" class=\"text-primary\">Login here</a>\r\n            </p>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport { AuthService } from 'src/app/services/auth.service';\r\nimport { AlertComponent } from 'src/app/theme/shared/components/alert/alert.component';\r\nimport { SharedModule } from 'src/app/theme/shared/shared.module';\r\nimport { OtpComponent } from '../otp/otp.component';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  standalone: true,\r\n  imports: [RouterModule, SharedModule, AlertComponent],\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.scss']\r\n})\r\nexport default class RegisterComponent {\r\n  SignUpOptions = [\r\n    {\r\n      image: 'assets/images/authentication/google.svg',\r\n      name: 'Google'\r\n    },\r\n    {\r\n      image: 'assets/images/authentication/twitter.svg',\r\n      name: 'Twitter'\r\n    },\r\n    {\r\n      image: 'assets/images/authentication/facebook.svg',\r\n      name: 'Facebook'\r\n    }\r\n  ];\r\n\r\n  signUpForm: FormGroup; // Form group for the sign-up form\r\n  submitted: boolean = false; // Track form submission status\r\n  showPassword: boolean = false;\r\n  showConfirmPassword: boolean = false;\r\n\r\n  alertMessage: string = '';\r\n  alertType: 'success' | 'danger' | 'warning' | 'info' = 'info';\r\n  alertVisible: boolean = false; // Track the alert's visibility\r\n  alertTimeout: any; // To store the timeout ID\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private authService: AuthService,\r\n    private dialog: MatDialog,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.initializeForm();\r\n    this.signUpForm.get('role').disable();\r\n  }\r\n\r\n  // Initialize the form with default controls and validators\r\n  initializeForm(): void {\r\n    this.signUpForm = this.formBuilder.group(\r\n      {\r\n        firstName: ['', [Validators.required, Validators.minLength(2)]],\r\n        lastName: ['', [Validators.required, Validators.minLength(2)]],\r\n        emailAddress: ['', [Validators.required, Validators.email]],\r\n        role: ['', Validators.required],\r\n        password: ['', [Validators.required, Validators.minLength(6)]],\r\n        confirmPassword: ['', [Validators.required]]\r\n      },\r\n      {\r\n        validator: this.passwordMatchValidator // Custom validator for password match\r\n      }\r\n    );\r\n\r\n    // Subscribe to emailAddress changes\r\n    this.signUpForm.get('emailAddress').valueChanges.subscribe((email) => {\r\n      if (this.signUpForm.get('emailAddress').valid) {\r\n        this.signUpForm.get('role').enable(); // Enable the role field if email is valid\r\n\r\n        // Set role based on email domain\r\n        if (email.endsWith('@justice.gov.za')) {\r\n          this.signUpForm.get('role').disable();\r\n          this.signUpForm.get('role').setValue('official');\r\n        } else {\r\n          this.signUpForm.get('role').setValue('liquidator');\r\n          this.signUpForm.get('role').disable();\r\n        }\r\n      } else {\r\n        this.signUpForm.get('role').disable(); // Disable the role field if email is invalid\r\n        this.signUpForm.get('role').setValue(''); // Clear the role field\r\n      }\r\n    });\r\n  }\r\n\r\n  // Custom validator to check if passwords match\r\n  passwordMatchValidator(form: FormGroup) {\r\n    const password = form.get('password')?.value;\r\n    const confirmPassword = form.get('confirmPassword')?.value;\r\n\r\n    return password === confirmPassword ? null : { mismatch: true };\r\n  }\r\n\r\n  togglePasswordVisibility() {\r\n    this.showPassword = !this.showPassword;\r\n  }\r\n\r\n  toggleConfirmPasswordVisibility() {\r\n    this.showConfirmPassword = !this.showConfirmPassword;\r\n  }\r\n\r\n  // Handle form submission\r\n  onSubmit() {\r\n    if (this.signUpForm.valid) {\r\n      this.authService\r\n        .register({\r\n          firstName: this.signUpForm.get('firstName')?.value,\r\n          lastName: this.signUpForm.get('lastName')?.value,\r\n          email: this.signUpForm.get('emailAddress')?.value,\r\n          password: this.signUpForm.get('confirmPassword')?.value,\r\n          role: this.signUpForm.get('role')?.value\r\n        })\r\n        .subscribe({\r\n          next: (response) => {\r\n            // Show the success alert\r\n            this.showAlert(response.message, 'success');\r\n  \r\n            // Set a timeout to close the alert and open the OTP modal in sync\r\n            setTimeout(() => {\r\n              // Close the alert\r\n              this.closeAlert();  // Assuming you have a method to close the alert\r\n  \r\n              // Open the OTP modal\r\n              const dialogRef = this.dialog.open(OtpComponent, {\r\n                data: {\r\n                  email: this.signUpForm.get('emailAddress')?.value,\r\n                }\r\n              });\r\n            }, 3000); // Adjust the timeout duration as needed\r\n          },\r\n          error: (error) => {\r\n            // Show an error alert if registration fails\r\n            this.showAlert(error.error.message, 'danger');\r\n          }\r\n        });\r\n    } else {\r\n      // Show an alert if form validation fails\r\n      this.showAlert('Please fill in all required fields correctly.', 'danger');\r\n    }\r\n  }\r\n  \r\n\r\n  showAlert(message: string, type: 'success' | 'danger') {\r\n    this.alertMessage = message;\r\n    this.alertType = type;\r\n    this.alertVisible = true;\r\n\r\n    // Clear any existing timeout to prevent multiple timeouts running\r\n    if (this.alertTimeout) {\r\n      clearTimeout(this.alertTimeout);\r\n    }\r\n\r\n    // Hide the alert after 5 seconds (5000 milliseconds)\r\n    this.alertTimeout = setTimeout(() => {\r\n      this.alertVisible = false; // Hide the alert after the specified time\r\n    }, 5000);\r\n  }\r\n\r\n  closeAlert() {\r\n    this.alertVisible = false; // Hide the alert\r\n    if (this.alertTimeout) {\r\n      clearTimeout(this.alertTimeout); // Clear timeout if alert is closed manually\r\n    }\r\n  }\r\n  // Utility getter to access form controls easily\r\n  get f() {\r\n    return this.signUpForm.controls;\r\n  }\r\n\r\n  login(){\r\n    this.router.navigate(['/login']).then(() => {\r\n      window.location.reload();\r\n    });\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}